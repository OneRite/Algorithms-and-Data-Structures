# Реализация алгоритма Бойера-Мура для поиска подстроки в строке
# Алгоритм Бойера-Мура — один из самых быстрых алгоритмов поиска подстроки в строке. 
# Он работает по принципу сравнения справа налево и использует две эвристики:
#Правило плохого символа — ускоряет сдвиг, если встретился несовпадающий символ.
#Правило хорошего суффикса (не используется в данной реализации) — учитывает уже совпавшие суффиксы.
#Этот алгоритм работает быстрее Кнута-Морриса-Пратта на реальных данных, так как пропускает больше ненужных сравнений.

def boyer_moore_search(text, pattern):
    """Поиск всех вхождений pattern в text с использованием алгоритма Бойера-Мура."""
    m = len(pattern)
    n = len(text)

    if m == 0 or n == 0 or m > n: #Если pattern или text пусты, или если 
        #pattern длиннее text, возвращаем пустой список.


        return []

    #Создаем словарь сдвигов bad_char, где каждому символу text присваивается сдвиг 
    # по умолчанию m (длина шаблона).
    #Затем для всех символов шаблона (кроме последнего) вычисляем оптимальный сдвиг:
    #Если pattern[i] встречается, сдвигаем шаблон на m - 1 - i
    # Построение таблицы плохих символов
    bad_char = {char: m for char in set(text)}
    for i in range(m - 1):
        bad_char[pattern[i]] = m - 1 - i

    result = []
    shift = 0

    while shift <= n - m: #ОСНОВНОЙ АЛГОРИТМ 
        #Проходим по text, начиная с shift = 0.
        #j = m - 1 означает, что мы сравниваем символы справа налево.
        j = m - 1

        # Проверка совпадения с конца шаблона
        # Сравниваем символы pattern и text справа налево.
        #Если j становится меньше 0, значит совпадение найдено.


        while j >= 0 and pattern[j] == text[shift + j]:
            j -= 1

        if j < 0: #Если все символы совпали, добавляем shift в результат.
       #Сдвигаем шаблон на m (длина pattern).
            result.append(shift)
            shift += m  # Сдвиг на длину шаблона
        else: #Если найден неправильный символ, используем таблицу bad_char:
              #Берем символ text[shift + m - 1] и находим его сдвиг в bad_char.
            #Если символа нет в bad_char, сдвигаем на m.
            shift += bad_char.get(text[shift + m - 1], m)

    return result

if __name__ == "__main__":
    text = input("Введите текст: ")
    pattern = input("Введите образец для поиска: ")

    matches = boyer_moore_search(text, pattern)

    if matches:
        print("Образец найден на позициях:", matches)
    else:
        print("Образец не найден")
