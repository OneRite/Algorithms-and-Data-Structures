#9.	Задача коммивояжера - поиск кратчайшего возможного маршрута, 
# который проходит через заданный набор городов и возвращается в начальный город. 
# Маршруты заданы матрицей связности.


import sys

def tsp(graph):
    n = len(graph) ## количество городов
    dp = [[float('inf')] * n for _ in range(1 << n)]
    dp[1][0] = 0  # Стартуем из города 0, маска = 1 (только город 0 посещён)

    for mask in range(1 << n): # перебираем все подмножества посещённых городов
        for u in range(n): # текущий город, в котором заканчивается путь
            if not (mask & (1 << u)):
                continue  # если город u не в маске — пропускаем
            for v in range(n): # пробуем добраться до нового города v
                if mask & (1 << v) or graph[u][v] == 0:
                    continue  # если город уже посещён или нет пути — пропускаем
                next_mask = mask | (1 << v) # добавляем город v в маску
                dp[next_mask][v] = min(dp[next_mask][v], dp[mask][u] + graph[u][v])

    # Завершаем путь: мы находим минимальный способ 
    # вернуться из любого i обратно в 0.
    min_cost = float('inf')
    for i in range(n):
        if graph[i][0] > 0:
            min_cost = min(min_cost, dp[(1 << n) - 1][i] + graph[i][0])

    return min_cost

# Пример матрицы смежности (граф полностью связанный)
graph = [
    [0, 29, 20, 21],
    [29, 0, 15, 17],
    [20, 15, 0, 28],
    [21, 17, 28, 0]
]

print("Минимальная длина маршрута:", tsp(graph))
